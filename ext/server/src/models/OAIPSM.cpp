/**
 * Pedestrian Webservice
 * Webservice registers pedestrian request for going through intersection
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPSM.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPSM::OAIPSM(QString json) {
    this->init();
    this->fromJson(json);
}

OAIPSM::OAIPSM() {
    this->init();
}

OAIPSM::~OAIPSM() {

}

void
OAIPSM::init() {
    
    m_id_isSet = false;
    m_id_isValid = false;
    
    m_lon_isSet = false;
    m_lon_isValid = false;
    
    m_lat_isSet = false;
    m_lat_isValid = false;
    
    m_heading_isSet = false;
    m_heading_isValid = false;
    
    m_velocity_isSet = false;
    m_velocity_isValid = false;
    }

void
OAIPSM::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIPSM::fromJsonObject(QJsonObject json) {
    
    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    
    m_lon_isValid = ::OpenAPI::fromJsonValue(lon, json[QString("lon")]);
    
    
    m_lat_isValid = ::OpenAPI::fromJsonValue(lat, json[QString("lat")]);
    
    
    m_heading_isValid = ::OpenAPI::fromJsonValue(heading, json[QString("heading")]);
    
    
    m_velocity_isValid = ::OpenAPI::fromJsonValue(velocity, json[QString("velocity")]);
    
    
}

QString
OAIPSM::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPSM::asJsonObject() const {
    QJsonObject obj;
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	if(m_lon_isSet){
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(lon));
    }
	if(m_lat_isSet){
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(lat));
    }
	if(m_heading_isSet){
        obj.insert(QString("heading"), ::OpenAPI::toJsonValue(heading));
    }
	if(m_velocity_isSet){
        obj.insert(QString("velocity"), ::OpenAPI::toJsonValue(velocity));
    }
    return obj;
}


double
OAIPSM::getId() const {
    return id;
}
void
OAIPSM::setId(const double &id) {
    this->id = id;
    this->m_id_isSet = true;
}


double
OAIPSM::getLon() const {
    return lon;
}
void
OAIPSM::setLon(const double &lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}


double
OAIPSM::getLat() const {
    return lat;
}
void
OAIPSM::setLat(const double &lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}


double
OAIPSM::getHeading() const {
    return heading;
}
void
OAIPSM::setHeading(const double &heading) {
    this->heading = heading;
    this->m_heading_isSet = true;
}


double
OAIPSM::getVelocity() const {
    return velocity;
}
void
OAIPSM::setVelocity(const double &velocity) {
    this->velocity = velocity;
    this->m_velocity_isSet = true;
}

bool
OAIPSM::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_lon_isSet){ isObjectUpdated = true; break;}
    
        if(m_lat_isSet){ isObjectUpdated = true; break;}
    
        if(m_heading_isSet){ isObjectUpdated = true; break;}
    
        if(m_velocity_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIPSM::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lon_isValid && m_lat_isValid && m_heading_isValid && true;
}

}

